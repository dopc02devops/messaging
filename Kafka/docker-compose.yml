version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    platform: linux/arm64  # For M1 Macs
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 6000
      ZOOKEEPER_INIT_LIMIT: 10
      ZOOKEEPER_SYNC_LIMIT: 5
      ZOO_LOG_LEVEL: DEBUG
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_datalog:/var/lib/zookeeper/datalog
    networks:
      - kafka_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    platform: linux/arm64  # For M1 Macs
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://:29092,EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - kafka_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "29092"]
      interval: 10s
      retries: 5

  producer:
    build: .
    command: python producer.py
    platform: linux/arm64  # For M1 Macs
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - producer_data:/app
    networks:
      - kafka_network
    restart: unless-stopped

  consumer_payroll:
    build: .
    command: python consumer_payroll.py
    platform: linux/arm64  # For M1 Macs
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - consumer_data:/app
    networks:
      - kafka_network
    restart: unless-stopped

  consumer_security:
    build: .
    command: python consumer_security.py
    platform: linux/arm64  # For M1 Macs
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - consumer_data:/app
    networks:
      - kafka_network
    restart: unless-stopped

volumes:
  zookeeper_data:
  zookeeper_datalog:
  kafka_data:
  producer_data:
  consumer_data:

networks:
  kafka_network:
    driver: bridge
